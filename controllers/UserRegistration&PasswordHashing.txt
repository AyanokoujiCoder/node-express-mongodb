Instalaremos Big Crypt en la terminal.

$ npm i bcrypt

El error que describes ocurre frecuentemente cuando se intenta instalar bcrypt 
en entornos donde hay incompatibilidades con las versiones de Node.js, dependencias 
obsoletas o problemas con las herramientas de compilación necesarias para construir 
los módulos nativos. Aquí tienes pasos para solucionar el problema:

1. Usa bcryptjs como alternativa
bcrypt es una dependencia nativa que necesita ser compilada, lo cual puede causar 
problemas en ciertos entornos. Si no necesitas funciones avanzadas y buscas evitar 
errores, puedes usar bcryptjs, una implementación puramente en JavaScript.

$ npm install bcryptjs

En tu código, cambia las importaciones así:

const bcrypt = require('bcryptjs');

Thunder.
Luego aqui nos ocurrio un error porque lo habiamos registrado con el mismo correo electronico:

POST: http://localhost:5001/api/users/register

{
  "username": "dmalvia",
  "email": "dipesh.malvia@gmail.com",
  "phone": "123456"
}

{
  "title": "Validation Failed",
  "message": "All fields are mandatory!",
  "stackTrace": "Error: All fields are mandatory!\n    at c:\\Users\\LENOVO\\Desktop\\Academia-X\\Node_JS
  \\Node&Express&MongoDB\\controllers\\userController.js:14:15\n    at asyncUtilWrap (c:\\Users\\LENOVO\\
  Desktop\\Academia-X\\Node_JS\\Node&Express&MongoDB\\node_modules\\express-async-handler\\index.js:3:20)\n    
  at Layer.handle [as handle_request] (c:\\Users\\LENOVO\\Desktop\\Academia-X\\Node_JS\\Node&Express&MongoDB
  \\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (c:\\Users\\LENOVO\\Desktop\\Academia-X\\
  Node_JS\\Node&Express&MongoDB\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch 
  (c:\\Users\\LENOVO\\Desktop\\Academia-X\\Node_JS\\Node&Express&MongoDB\\node_modules\\express\\lib\\router
  \\route.js:119:3)\n    at Layer.handle [as handle_request] (c:\\Users\\LENOVO\\Desktop\\Academia-X\\Node_JS
  \\Node&Express&MongoDB\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at c:\\Users\\LENOVO\\Desktop
  \\Academia-X\\Node_JS\\Node&Express&MongoDB\\node_modules\\express\\lib\\router\\index.js:284:15\n    
  at Function.process_params (c:\\Users\\LENOVO\\Desktop\\Academia-X\\Node_JS\\Node&Express&MongoDB\\node_modules
  \\express\\lib\\router\\index.js:346:12)\n    at next (c:\\Users\\LENOVO\\Desktop\\Academia-X\\Node_JS\\
  Node&Express&MongoDB\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle 
  (c:\\Users\\LENOVO\\Desktop\\Academia-X\\Node_JS\\Node&Express&MongoDB\\node_modules\\express\\lib\\router\\index.js:175:3)"
}

Aqui solamente modificamos los datos y los pusimos el correo electronico del usuario registrado:

{
  "username": "JohnDoe",
  "email": "john.doe@example.com",
  "password": "password123"
}

Status: 200 OK
Size: 31 Bytes
Time: 210 ms

{
  "message": "Register the user"
}

En la terminal veremos: Hashed Password: 

Hashed Password:  $2a$10$bnIl.HwXft11bxN0.lbxZ.wVuZRDGpjMCCIJItUkp1WnQHkq89zay
Hashed Password:  $2a$10$p2Zzn96f3yVi2uOMMmp76.bMBh9PSoofAxkZRWv.90w8hwxfAj1Zy

Veras que tenemos la contraseña hash, vamos almacenar en la base de datos para que 
podamos tener la seguridad de la contraseña del usuario.

{
  "_id": "674d3777426a925dbe2e5dd4",
  "email": "john.doe@example.com"
}

Server running on port 5001
Database connected:  ayanokoujicluster-shard-00-02.m762v.mongodb.net mycontacts-backend
Hashed Password:  $2a$10$POaitpKTeGrtuD8SJZXYZexDCVKkYG9mgpuFGIWReeZGZ0CEAI5FW
User created {
  username: 'JohnDoe',
  email: 'john.doe@example.com',
  password: '$2a$10$POaitpKTeGrtuD8SJZXYZexDCVKkYG9mgpuFGIWReeZGZ0CEAI5FW',
  _id: new ObjectId('674d3777426a925dbe2e5dd4'),
  createdAt: 2024-12-02T04:28:39.182Z,
  updatedAt: 2024-12-02T04:28:39.182Z,
  __v: 0
}
No Error, All good !

Si lo volvemos a ejecutar eso quiere decir que el usuario ya esta registrado.